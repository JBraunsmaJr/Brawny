@page "/Portfolio"
@using BrawnyFinal.Models
@inject HttpClient _http
@inject ISnackbar _snackbar

<PageTitle>Portfolio</PageTitle>

@{
    int spacing = 4;
}

<div style="margin: 16px">
    <MudGrid>
        @foreach (var item in _items)
        {
            <MudItem md="12">
                <MudGrid Spacing="0">
                    <MudItem md="2" sm="2" xs="12">
                        <MudImage Style="width: 100%;height: 100%; max-height: 320px;" Src="@item.Image"/>
                    </MudItem>
                    <MudItem md="10" sm="10" xs="12">
                        <MudCard Elevation="3" Class="dark-background" Style="height: 100%">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6" Color="Color.Secondary">
                                    @item.Title
                                </MudText>
                                <MudSpacer/>
                                <MudLink Href="@item.Github" Target="_blank" Color="Color.Info"
                                         Typo="Typo.button">
                                    <MudIcon Icon="@Icons.Custom.Brands.GitHub"/>
                                </MudLink>
                            </MudCardHeader>
                            <MudCardContent>
                                @foreach (var area in item.Description.Split("\n\n"))
                                {
                                    <MudText Typo="Typo.body1">@area</MudText>
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
        }
    </MudGrid>
</div>

@code {
    List<PortfolioItem> _items = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _items = (await _http.GetFromJsonAsync<PortfolioItem[]>("content/portfolio.json"))?.ToList() ?? new();
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error);
        }
    }

}