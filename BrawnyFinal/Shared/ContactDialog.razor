@using BrawnyFinal.ViewModels
@using System.ComponentModel.DataAnnotations
@inject ISnackbar _snackbar

<MudDialog>
    <DialogContent>
        <MudForm @bind-IsValid="isValid">
            <MudTextField T="string" 
                          Label="Email" 
                          Required="true"
                          RequiredError="Email is required"
                          InputType="InputType.Email" 
                          Validation="@(new EmailAddressAttribute{ErrorMessage = "Invalid email address"})"
                          @bind-Value="_model.Email"
                          Immediate="true"/>

            <MudTextField T="string" 
                          Label="Name" 
                          Required="true"
                          RequiredError="Your name is required"
                          InputType="InputType.Text"
                          @bind-Value="@_model.Name"
                          Immediate="true"/>

            <MudTextField InputType="InputType.Text" 
                          Lines="10" 
                          Label="Message" 
                          Required="true" 
                          T="string" 
                          RequiredError="A message is required"
                          Immediate="true"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton IconClass="@Icons.Filled.Email" 
                           Color="Color.Primary" 
                           OnClick="Submit"
                           Disabled="@(!isValid)">Submit</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    
    // Container for data
    ContactForm _model = new();
    
    // Prevent the user from submitting the form until all fields are valid
    bool isValid;
    
    void Cancel() => MudDialog.Cancel();
    
    void Submit()
    {
        if (!isValid)
            return;
        
        MudDialog.Close(DialogResult.Ok(_model));
        
        // For UX purposes the user should be notified that it was a successful submission
        _snackbar.Add("Your message has been submitted", Severity.Success);
    }
}